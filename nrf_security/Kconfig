menu "Nordic Security"

config NORDIC_SECURITY_PROMPTLESS
	bool
	default y if BUILD_WITH_TFM
	help
	  Internal setting to disable the Nordic security backend
	  This setting is Kconfig internal that must be used by subsystems that
	  provides nRF Security selection groups.

config NORDIC_SECURITY_BACKEND
	bool
	prompt "Use Nordic provided security backend" if !NORDIC_SECURITY_PROMPTLESS
	depends on SOC_FAMILY_NRF
	select NRFXLIB_CRYPTO
	select ENTROPY_GENERATOR
	select MBEDTLS_PROMPTLESS
	select MBEDTLS
	default y if BUILD_WITH_TFM
	help
	  nRF Connect SDK Security provides crypto functionality through different backends.
	  Some HW platforms support the use of HW accelerated crypto features.
	  Enabled by default in TF-M builds on nRF Devices.

if NORDIC_SECURITY_BACKEND

comment "mbed TLS Configuration File"

config MBEDTLS_CFG_FILE
	string "mbed TLS configuration file"
	default "nrf-config.h"

config GENERATE_MBEDTLS_CFG_FILE
	bool
	prompt "Generate mbed TLS config file"
	default y
	help
	  nRF Connect SDK Security will generate a mbed TLS configuration file
	  based on the selection of configuration options in Kconfig.
	  However, if the generated configuration file needs custom
	  adjustments, this setting can be used to disable generating the
	  mbed TLS configuration file. Only disable this setting if you know
	  what you are doing.

config MBEDTLS_X509_LIBRARY
	bool
	prompt "Create mbed TLS x509 library"
	select NRF_SECURITY_ADVANCED
	select MBEDTLS_PK_C
	default y if MBEDTLS_PSA_CRYPTO_C && (MBEDTLS_ECDSA_C || MBEDTLS_ECDH_C)
	help
	  Create the mbed x509 library for handling of certificates.

menuconfig MBEDTLS_TLS_LIBRARY
	bool
	prompt "Create mbed TLS transport layer security library"
	select MBEDTLS_X509_LIBRARY
	default y if MBEDTLS_PSA_CRYPTO_C && (MBEDTLS_ECDSA_C || MBEDTLS_ECDH_C)
	help
	  Create the mbed SSL/TLS library in addition to the mbed crypto
	  library.

config MBEDTLS_SSL_TLS_C
	bool
	depends on MBEDTLS_TLS_LIBRARY
	default y
	help
	  Corresponds to MBEDTLS_SSL_TLS_C in mbed TLS config file

config MBEDTLS_SSL_PROTO_TLS1_2
	bool
	depends on MBEDTLS_TLS_LIBRARY
	default y
	help
	  Enable the TLS 1.2 protocol
	  Corresponds to MBEDTLS_SSL_PROTO_TLS1_2 in mbed TLS config file

config MBEDTLS_SSL_CLI_C
	bool "Enable the SSL/TLS client code"
	depends on MBEDTLS_TLS_LIBRARY
	default y
	help
	  This setting enables SSL/TLS client functionality.
	  Corresponds to MBEDTLS_SSL_CLI_C in mbed TLS config file

config MBEDTLS_SSL_SRV_C
	bool "Enable the SSL/TLS server code"
	depends on MBEDTLS_TLS_LIBRARY
	default y
	help
	  This setting enables SSL/TLS server functionality.
	  Corresponds to MBEDTLS_SSL_SRV_C in mbed TLS config file.

config MBEDTLS_KEY_EXCHANGE_SOME_PSK_ENABLED
	bool
	depends on MBEDTLS_TLS_LIBRARY
	default y

menu "mbed TLS memory configuration"

config MBEDTLS_ENABLE_HEAP
	bool "Enable global heap for mbed TLS"
	default y if BUILD_WITH_TFM
	help
	  This option enables the mbedtls to use the heap. This setting must
	  be global so that various applications and libraries in Zephyr do not
	  try to do this themselves as there can be only one heap defined
	  in mbedtls. If this is enabled, then the Zephyr will, during the device
	  startup, initialize the heap automatically.

config MBEDTLS_HEAP_SIZE
	int "Heap size for mbed TLS"
	default 15360 if OPENTHREAD_NRF_SECURITY
	default 65536 if BUILD_WITH_TFM
	default 512
	depends on MBEDTLS_ENABLE_HEAP
	help
	  Heap size for mbed TLS in bytes.
	  For streaming communication with arbitrary (HTTPS) servers on the
	  Internet, 32KB + overheads (up to another 20KB) may be needed.
	  Ensure to adjust the heap size according to the need of the
	  application.

endmenu # mbed TLS memory configuration

comment "Backend Selection"

if !NRF_SECURITY_MULTI_BACKEND

config CC3XX_SINGLE_BACKEND
	bool
	depends on CC3XX_BACKEND
	default y

config OBERON_SINGLE_BACKEND
	bool
	depends on OBERON_BACKEND
	default y

config MBEDTLS_VANILLA_SINGLE_BACKEND
	bool
	depends on MBEDTLS_VANILLA_BACKEND
	default y

endif # !NRF_SECURITY_MULTI_BACKEND

menuconfig CC3XX_BACKEND
	bool "Use cc3xx backend"
	depends on CRYPTOCELL_USABLE
	default y
	select NRF_CC3XX_PLATFORM if !BUILD_WITH_TFM
	help
	  Enable cc3xx backend

if CC3XX_BACKEND

config CC310_BACKEND
	bool
	depends on CC3XX_BACKEND && CRYPTOCELL_CC310_USABLE
	default y

config CC312_BACKEND
	bool
	depends on CC3XX_BACKEND && CRYPTOCELL_CC312_USABLE
	default y


config HW_CC3XX_INTERRUPT
	bool "Use interrupt version of nrf cc3xx platform and crypto libraries"

endif # CC3XX_BACKEND

config OBERON_BACKEND
	bool "Use nrf_oberon backend"
	default y if !CRYPTOCELL_USABLE
	select NRF_OBERON
	help
	  Enable nrf_oberon mbed TLS backend

config MBEDTLS_VANILLA_BACKEND
	bool "Use Original mbed TLS backend"
	help
	  Enable Original mbed TLS backend
	  This backend uses unaltered source code from the Arm mbed TLS project.

#
# Configuration to signal that multiple backends are enabled
#
config NRF_SECURITY_MULTI_BACKEND
	bool
	depends on NRF_SECURITY_ANY_BACKEND
	depends on (CC3XX_BACKEND && (OBERON_BACKEND || MBEDTLS_VANILLA_BACKEND) || \
			   (OBERON_BACKEND && MBEDTLS_VANILLA_BACKEND))
	default y

#
# Configuration to signal that any backend is enabled
#
config NRF_SECURITY_ANY_BACKEND
	bool
	depends on CC3XX_BACKEND || OBERON_BACKEND || MBEDTLS_VANILLA_BACKEND
	default y

comment "Configuration section"

if NRF_SECURITY_ANY_BACKEND

#
# Configuration to indicate that a glue layer is needed
# This is used when multiple backends are enabled that support
# a glued functionality (like AES)
#
config NRF_SECURITY_GLUE_LIBRARY
	bool
	depends on NRF_SECURITY_MULTI_BACKEND
	depends on GLUE_MBEDTLS_AES_C || GLUE_MBEDTLS_CCM_C || GLUE_MBEDTLS_DHM_C
	default y

menuconfig NRF_SECURITY_RNG
	bool
	prompt "Random Number Generator support" if !BUILD_WITH_TFM
	depends on ENTROPY_HAS_DRIVER
	default y
	select MBEDTLS_SHA256_C
	help
	  The Random Number Generator support in nRF Security provides a
	  Pseudorandom Number Generator, PRNG.
	  The Pseudorandom Number Generator is seeded by a True Random Number
	  Generator, TRNG, available in hardware.

if NRF_SECURITY_RNG

config MBEDTLS_CTR_DRBG_C
	bool
	prompt "PRNG using CTR_DRBG"
	default y
	select MBEDTLS_AES_C
	help
	  This setting will enable CTR_DRBG APIs in mbed TLS.
	  Corresponds to MBEDTLS_CTR_DRBG_C setting in mbed TLS config file.

config MBEDTLS_HMAC_DRBG_C
	bool
	prompt "PRNG using HMAC_DRBG"
	default y
	select MBEDTLS_SHA256_C
	help
	  This setting will enable HMAC_DRBG APIs in mbed TLS.
	  Corresponds to MBEDTLS_HMAC_DRBG_C setting in mbed TLS config file.

endif # NRF_SECURITY_RNG

menuconfig MBEDTLS_AES_C
	bool
	prompt "AES   - Advanced Encryption Standard"
	default y
	select CC3XX_MBEDTLS_AES_C if CC3XX_SINGLE_BACKEND
	select OBERON_MBEDTLS_AES_C if OBERON_SINGLE_BACKEND
	select VANILLA_MBEDTLS_AES_C if MBEDTLS_VANILLA_SINGLE_BACKEND
	help
	  This setting will enable AES block cipher, including ECB - Electronic Code Book.
	  Enabling AES will provide a sub-menu which allows for fine grained
	  configuration of specific cipher support.
	  Corresponds to MBEDTLS_AES_C setting in mbed TLS config file.

if MBEDTLS_AES_C

#
# List of additional symbols to indicate AES cipher key sizes.
# Based on backend selection.
#
config MBEDTLS_CIPHER_AES_256_ECB_C
	bool
	depends on OBERON_MBEDTLS_CIPHER_MODE_ECB || VANILLA_MBEDTLS_CIPHER_MODE_ECB || \
			   (CC312_BACKEND && CC3XX_MBEDTLS_CIPHER_MODE_ECB)
	default y

config MBEDTLS_CIPHER_AES_256_CBC_C
	bool
	depends on OBERON_MBEDTLS_CIPHER_MODE_CBC || VANILLA_MBEDTLS_CIPHER_MODE_CBC || \
			   (CC312_BACKEND && CC3XX_MBEDTLS_CIPHER_MODE_CBC)
	default y

config MBEDTLS_CIPHER_AES_256_CTR_C
	bool
	depends on OBERON_MBEDTLS_CIPHER_MODE_CTR || VANILLA_MBEDTLS_CIPHER_MODE_CTR || \
			   (CC312_BACKEND && CC3XX_MBEDTLS_CIPHER_MODE_CTR)
	default y

config MBEDTLS_CIPHER_AES_256_CFB_C
	bool
	depends on OBERON_MBEDTLS_CIPHER_MODE_CFB || VANILLA_MBEDTLS_CIPHER_MODE_CFB
	default y

config MBEDTLS_CIPHER_AES_256_OFB_C
	bool
	depends on OBERON_MBEDTLS_CIPHER_MODE_OFB || VANILLA_MBEDTLS_CIPHER_MODE_OFB
	default y

config MBEDTLS_CIPHER_AES_256_CCM_C
	bool
	depends on OBERON_MBEDTLS_CCM_C || VANILLA_MBEDTLS_CCM_C || \
			   (CC312_BACKEND && CC3XX_MBEDTLS_CCM_C)
	default y

#
# Internal symbols indicating aes_alt.h will be used
#
config MBEDTLS_AES_ALT
	bool
	depends on CC3XX_MBEDTLS_AES_C || GLUE_MBEDTLS_AES_C
	default y

config OBERON_ALTERNATE_AES_KEY_ENC
	bool
	depends on OBERON_MBEDTLS_AES_C
	default y

#
# Internal symbols for AES for specific backends
#
config CC3XX_MBEDTLS_AES_C
	bool

config OBERON_MBEDTLS_AES_C
	bool

config VANILLA_MBEDTLS_AES_C
	bool

#
# Internal symbols for AES ECB
#
config CC3XX_MBEDTLS_CIPHER_MODE_ECB
	bool
	depends on CC3XX_MBEDTLS_AES_C
	default y

config OBERON_MBEDTLS_CIPHER_MODE_ECB
	bool
	depends on OBERON_MBEDTLS_AES_C
	default y

config VANILLA_MBEDTLS_CIPHER_MODE_ECB
	bool
	depends on VANILLA_MBEDTLS_AES_C && !OBERON_MBEDTLS_CIPHER_MODE_ECB
	default y

if NRF_SECURITY_MULTI_BACKEND

#
# Internal symbols for AES gluing
#
config GLUE_MBEDTLS_AES_C
	bool
	depends on GLUE_CC3XX_MBEDTLS_AES_C || GLUE_OBERON_MBEDTLS_AES_C || \
			   GLUE_VANILLA_MBEDTLS_AES_C
	default y

config GLUE_CC3XX_MBEDTLS_AES_C
	bool
	depends on CC3XX_MBEDTLS_AES_C
	depends on OBERON_MBEDTLS_AES_C || VANILLA_MBEDTLS_AES_C
	default y

config GLUE_OBERON_MBEDTLS_AES_C
	bool
	depends on OBERON_MBEDTLS_AES_C
	depends on CC3XX_MBEDTLS_AES_C || VANILLA_MBEDTLS_AES_C
	default y

config GLUE_VANILLA_MBEDTLS_AES_C
	bool
	depends on VANILLA_MBEDTLS_AES_C
	depends on CC3XX_MBEDTLS_AES_C || OBERON_MBEDTLS_AES_C
	default y

comment "General AES Backend Selection"

config CC3XX_MBEDTLS_AES_C
	bool "cc310 (AES-128)"
	depends on CC310_BACKEND
	default y

config CC3XX_MBEDTLS_AES_C
	bool "cc312 (AES-128, AES-192, AES-256)"
	depends on CC312_BACKEND
	default y

config OBERON_MBEDTLS_AES_C
	bool "nrf_oberon (AES-128, AES-192, AES-256)"
	depends on OBERON_BACKEND
	default y

config VANILLA_MBEDTLS_AES_C
	bool "mbed TLS (AES-128, AES-192, AES-256)"
	depends on MBEDTLS_VANILLA_BACKEND

endif # NRF_SECURITY_MULTI_BACKEND (AES ECB)

comment "Cipher Selection"

config MBEDTLS_CIPHER_MODE_CBC
	bool "AES-CBC - AES Cipher Block Chaining mode"
	default y
	help
	  Enable the AES Cipher Block Chaining (CBC) mode,
	  MBEDTLS_CIPHER_MODE_CBC setting in mbed TLS config file.

if MBEDTLS_CIPHER_MODE_CBC

config GLUE_MBEDTLS_CIPHER_MODE_CBC
	bool
	depends on GLUE_MBEDTLS_AES_C && NRF_SECURITY_MULTI_BACKEND
	default y

config CC3XX_MBEDTLS_CIPHER_MODE_CBC
	bool
	depends on CC3XX_MBEDTLS_AES_C
	default y

config OBERON_MBEDTLS_CIPHER_MODE_CBC
	bool
	depends on OBERON_MBEDTLS_AES_C
	default y

config VANILLA_MBEDTLS_CIPHER_MODE_CBC
	bool
	depends on VANILLA_MBEDTLS_AES_C && !OBERON_MBEDTLS_CIPHER_MODE_CBC
	default y

menu "CBC cipher padding modes"
	depends on MBEDTLS_CIPHER_MODE_CBC

config MBEDTLS_CIPHER_PADDING_PKCS7
	bool
	prompt "Enable MBEDTLS_CIPHER_PADDING_PKCS7"
	default y
	help
	  Enable support for PKCS7 padding for CBC cipher functions in mbedTLS.
	  That is, fill buffer with ll bytes, where ll is padding length.

config MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS
	bool
	prompt "Enable MBEDTLS_CIPHER_PADDING_ONE_AND_ZEROS"
	default y
	help
	  Enable support for one and zeros padding for CBC cipher functions in mbedTLS.
	  That is, fill buffer with 80 00 .. 00.

config MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN
	bool
	prompt "Enable MBEDTLS_CIPHER_PADDING_ZEROS_AND_LEN"
	default y
	help
	  Enable support for zeros and length padding for CBC cipher functions in mbedTLS.
	  That is, fill buffer with 00 .. 00 ll, where ll is padding length.

config MBEDTLS_CIPHER_PADDING_ZEROS
	bool
	prompt "Enable MBEDTLS_CIPHER_PADDING_ZEROS"
	default y
	help
	  Enable support for zeros padding for CBC cipher functions in mbedTLS.
	  That is, fill buffer with 00 .. 00.

endmenu # CBC cipher padding modes

endif # MBEDTLS_CIPHER_MODE_CBC

config MBEDTLS_CIPHER_MODE_CTR
	bool "AES-CTR - AES Counter Block Cipher mode"
	default y
	help
	  Enable the AES Counter Block Cipher mode (CTR) mode,
	  MBEDTLS_CIPHER_MODE_CTR setting in mbed TLS config file.

if MBEDTLS_CIPHER_MODE_CTR

config GLUE_MBEDTLS_CIPHER_MODE_CTR
	bool
	depends on GLUE_MBEDTLS_AES_C && NRF_SECURITY_MULTI_BACKEND
	default y

config CC3XX_MBEDTLS_CIPHER_MODE_CTR
	bool
	depends on CC3XX_MBEDTLS_AES_C
	default y

config OBERON_MBEDTLS_CIPHER_MODE_CTR
	bool
	depends on OBERON_MBEDTLS_AES_C
	default y

config VANILLA_MBEDTLS_CIPHER_MODE_CTR
	bool
	depends on VANILLA_MBEDTLS_AES_C && !OBERON_MBEDTLS_CIPHER_MODE_CTR
	default y

endif # MBEDTLS_CIPHER_MODE_CTR

#
# Note: AES CFB is not available in CC3XX_BACKEND
#
config MBEDTLS_CIPHER_MODE_CFB
	bool "AES-CFB - AES Cipher Feedback mode"
	depends on OBERON_MBEDTLS_AES_C || VANILLA_MBEDTLS_AES_C
	default y
	help
	  Enable the AES Cipher Feedback mode (CFB) mode,
	  MBEDTLS_CIPHER_MODE_CFB setting in mbed TLS config file.

if MBEDTLS_CIPHER_MODE_CFB

config GLUE_MBEDTLS_CIPHER_MODE_CFB
	bool
	depends on GLUE_MBEDTLS_AES_C && NRF_SECURITY_MULTI_BACKEND
	default y

config OBERON_MBEDTLS_CIPHER_MODE_CFB
	bool
	depends on OBERON_MBEDTLS_AES_C
	default y

config VANILLA_MBEDTLS_CIPHER_MODE_CFB
	bool
	depends on VANILLA_MBEDTLS_AES_C && !OBERON_MBEDTLS_CIPHER_MODE_CFB
	default y

endif # MBEDTLS_CIPHER_MODE_CFB

#
# Note: AES OFB is not available in CC3XX_BACKEND
#
config MBEDTLS_CIPHER_MODE_OFB
	bool "AES-OFB - AES Output Feedback mode"
	depends on OBERON_MBEDTLS_AES_C || VANILLA_MBEDTLS_AES_C
	default y
	help
	  Enable the AES Output Feedback mode (OFB) mode,
	  MBEDTLS_CIPHER_MODE_OFB setting in mbed TLS config file.

if MBEDTLS_CIPHER_MODE_OFB

config GLUE_MBEDTLS_CIPHER_MODE_OFB
	bool
	depends on GLUE_MBEDTLS_AES_C && NRF_SECURITY_MULTI_BACKEND
	default y

config OBERON_MBEDTLS_CIPHER_MODE_OFB
	bool
	depends on OBERON_MBEDTLS_AES_C
	default y

config VANILLA_MBEDTLS_CIPHER_MODE_OFB
	bool
	depends on VANILLA_MBEDTLS_AES_C && !OBERON_MBEDTLS_CIPHER_MODE_OFB
	default y

endif # MBEDTLS_CIPHER_MODE_OFB

#
# Note: AES XTS is not available in CC3XX_BACKEND
#
config MBEDTLS_CIPHER_MODE_XTS
	bool "AES-XTS - AES Xor-encrypt-xor with ciphertext stealing mode"
  depends on OBERON_MBEDTLS_AES_C || VANILLA_MBEDTLS_AES_C
	default y
	help
	  Enable the AES Xor-encrypt-xor with ciphertext stealing mode (XTS) mode,
	  MBEDTLS_CIPHER_MODE_XTS setting in mbed TLS config file.

if MBEDTLS_CIPHER_MODE_XTS

config GLUE_MBEDTLS_CIPHER_MODE_XTS
	bool
	depends on GLUE_MBEDTLS_AES_C && NRF_SECURITY_MULTI_BACKEND
	default y

config OBERON_MBEDTLS_CIPHER_MODE_XTS
	bool
	depends on OBERON_MBEDTLS_AES_C
	default y

config VANILLA_MBEDTLS_CIPHER_MODE_XTS
	bool
	depends on VANILLA_MBEDTLS_AES_C && !OBERON_MBEDTLS_CIPHER_MODE_XTS
	default y

endif # MBEDTLS_CIPHER_MODE_XTS

menuconfig MBEDTLS_CMAC_C
	bool "AES-CMAC - AES Cipher-based Message Authentication Code mode for block ciphers"
	default y
	select CC3XX_MBEDTLS_CMAC_C if CC3XX_SINGLE_BACKEND
	select OBERON_MBEDTLS_CMAC_C if OBERON_SINGLE_BACKEND
	select VANILLA_MBEDTLS_CMAC_C if MBEDTLS_VANILLA_SINGLE_BACKEND

if MBEDTLS_CMAC_C

config MBEDTLS_AES_256_CMAC_C
	bool
	depends on OBERON_MBEDTLS_CMAC_C || VANILLA_MBEDTLS_CMAC_C || \
			   (CC312_BACKEND && CC3XX_MBEDTLS_CMAC_C)
	default y

config MBEDTLS_CMAC_ALT
	bool
	depends on CC3XX_MBEDTLS_CMAC_C
	default y

config CC3XX_MBEDTLS_CMAC_C
	bool

config OBERON_MBEDTLS_CMAC_C
	bool

config VANILLA_MBEDTLS_CMAC_C
	bool

if NRF_SECURITY_MULTI_BACKEND

choice
	bool
	prompt "Backend selection"
	depends on NRF_SECURITY_MULTI_BACKEND
	default CHOICE_CC3XX_MBEDTLS_CMAC_C

config CHOICE_CC3XX_MBEDTLS_CMAC_C
	bool "cc310 (CMAC using AES-128)"
	depends on CC3XX_MBEDTLS_AES_C && CC310_BACKEND
	select CC3XX_MBEDTLS_CMAC_C
	help
	  HW accelerated CMAC support using AES-128

config CHOICE_CC3XX_MBEDTLS_CMAC_C
	bool "cc312 (CMAC using AES-128, AES-192, AES-256)"
	depends on CC3XX_MBEDTLS_AES_C && CC312_BACKEND
	select CC3XX_MBEDTLS_CMAC_C
	help
	  HW accelerated CMAC support using AES-128, AES-192, AES-256

config CHOICE_OBERON_MBEDTLS_CMAC_C
	bool "nrf_oberon (CMAC using AES-128, AES-192, AES-256)"
	depends on OBERON_MBEDTLS_AES_C
	select OBERON_MBEDTLS_CMAC_C
	help
	  CMAC support using AES-128, AES-192, AES-256

config CHOICE_VANILLA_MBEDTLS_CMAC_C
	bool "mbed TLS (CMAC using AES-128, AES-192, AES-256)"
	depends on VANILLA_MBEDTLS_AES_C
	select VANILLA_MBEDTLS_CMAC_C
	help
	  CMAC support using AES-128, AES-192, AES-256

endchoice # CMAC backend selection

endif # NRF_SECURITY_MULTI_BACKEND (CMAC)

endif # MBEDTLS_CMAC_C

endif # MBEDTLS_AES_C

menu "AEAD  - Authenticated Encryption with Associated Data"

menuconfig MBEDTLS_CCM_C
	bool "AES-CCM - AES Counter with CBC-MAC mode"
	depends on MBEDTLS_AES_C
	default y
	select CC3XX_MBEDTLS_CCM_C if CC3XX_SINGLE_BACKEND
	select OBERON_MBEDTLS_CCM_C if OBERON_SINGLE_BACKEND
	select VANILLA_MBEDTLS_CCM_C if MBEDTLS_VANILLA_SINGLE_BACKEND
	help
	  Enable the Counter with CBC-MAC (CCM) mode for 128-bit block cipher.
	  This also includes CCM*
	  MBEDTLS_CCM_C setting in mbed TLS config file.

if MBEDTLS_CCM_C

config MBEDTLS_CCM_ALT
	bool
	depends on CC3XX_MBEDTLS_CCM_C || GLUE_MBEDTLS_CCM_C
	default y

config CC3XX_MBEDTLS_CCM_C
	bool
	depends on CC3XX_BACKEND && MBEDTLS_CCM_C
	default y

config OBERON_MBEDTLS_CCM_C
	bool

config VANILLA_MBEDTLS_CCM_C
	bool

if NRF_SECURITY_MULTI_BACKEND

config GLUE_MBEDTLS_CCM_C
	bool
	depends on NRF_SECURITY_MULTI_BACKEND && GLUE_MBEDTLS_AES_C
	depends on GLUE_CC3XX_MBEDTLS_CCM_C || GLUE_OBERON_MBEDTLS_CCM_C || \
			   GLUE_VANILLA_MBEDTLS_CCM_C
	default y

config GLUE_CC3XX_MBEDTLS_CCM_C
	bool
	depends on CC3XX_MBEDTLS_CCM_C
	depends on GLUE_OBERON_MBEDTLS_CCM_C || GLUE_VANILLA_MBEDTLS_CCM_C
	default y

config GLUE_OBERON_MBEDTLS_CCM_C
	bool
	depends on OBERON_MBEDTLS_CCM_C
	depends on CC3XX_MBEDTLS_CCM_C || VANILLA_MBEDTLS_CCM_C
	default y

config GLUE_VANILLA_MBEDTLS_CCM_C
	bool
	depends on VANILLA_MBEDTLS_CCM_C
	depends on CC3XX_MBEDTLS_CCM_C || OBERON_MBEDTLS_CCM_C
	default y

config CC3XX_MBEDTLS_CCM_C
	bool "cc310 (Using AES-128)"
	depends on CC3XX_MBEDTLS_AES_C && CC310_BACKEND
	default y
	help
	  Enable the Counter with CBC-MAC (CCM) mode for 128-bit block cipher
	  using AES-128. This also includes CCM* (star) mode
	  MBEDTLS_CCM_C setting in mbed TLS config file.

config CC3XX_MBEDTLS_CCM_C
	bool "cc312 (Using AES-128, AES-192, AES-256)"
	depends on CC3XX_MBEDTLS_AES_C && CC312_BACKEND
	default y
	help
	  Enable the Counter with CBC-MAC (CCM) mode for 128-bit block cipher
	  using AES-128, AES-192, AES-256. This also includes CCM* (star) mode
	  MBEDTLS_CCM_C setting in mbed TLS config file.

config OBERON_MBEDTLS_CCM_C
	bool "nrf_oberon (Using AES-128, AES-192, AES-256)"
	depends on OBERON_MBEDTLS_AES_C
	default y
	help
	  Enable the Counter with CBC-MAC (CCM) mode for 128-bit block cipher
	  using AES-128, AES-192, AES-256. This also includes CCM* (star) mode
	  MBEDTLS_CCM_C setting in mbed TLS config file.

config VANILLA_MBEDTLS_CCM_C
	bool "mbed TLS (Using AES-128, AES-192, AES-256)"
	depends on VANILLA_MBEDTLS_AES_C && OBERON_MBEDTLS_CCM_C
	default y
	help
	  Enable the Counter with CBC-MAC (CCM) mode for 128-bit block cipher
	  using AES-128, AES-192, AES-256. This also includes CCM* (star) mode
	  MBEDTLS_CCM_C setting in mbed TLS config file.

endif # NRF_SECURITY_MULTI_BACKEND (AES CCM)

endif # MBEDTLS_CCM_C

config MBEDTLS_GCM_ALT
	bool
	depends on CC3XX_MBEDTLS_GCM_C
	default y

config CC3XX_MBEDTLS_GCM_C
	bool

config MBEDTLS_GCM_C
	bool
	prompt "AES-GCM - AES Galois/Counter Mode support"
	depends on MBEDTLS_AES_C
	depends on OBERON_MBEDTLS_AES_C || VANILLA_MBEDTLS_AES_C || \
			   (CC312_BACKEND && CC3XX_MBEDTLS_AES_C) || BUILD_WITH_TFM
	default y
	select CC3XX_MBEDTLS_GCM_C if CC312_BACKEND
	help
	  Enable the GCM module.
	  MBEDTLS_GCM_C setting in mbed TLS config file.

config MBEDTLS_CHACHA20_C
	bool
	prompt "CHACHA20 stream cipher support"
	default y

	select CC3XX_MBEDTLS_CHACHA20_C if CC3XX_SINGLE_BACKEND
	select OBERON_MBEDTLS_CHACHA20_C if OBERON_SINGLE_BACKEND
	select VANILLA_MBEDTLS_CHACHA20_C if MBEDTLS_VANILLA_SINGLE_BACKEND
	help
	  Enable the CHACHA20 stream cipher.
	  MBEDTLS_CHACHA20_C setting in mbed TLS config file.

if MBEDTLS_CHACHA20_C

config MBEDTLS_CHACHA20_ALT
	bool

	depends on CC3XX_MBEDTLS_CHACHA20_C || OBERON_MBEDTLS_CHACHA20_C

	default y

config CC3XX_MBEDTLS_CHACHA20_C
	bool

config OBERON_MBEDTLS_CHACHA20_C
	bool

config VANILLA_MBEDTLS_CHACHA20_C
	bool

choice
	bool
	prompt "Backend selection"
	depends on NRF_SECURITY_MULTI_BACKEND
	default CHOICE_CC3XX_MBEDTLS_CHACHA20_C

config CHOICE_CC3XX_MBEDTLS_CHACHA20_C
	bool "cc3xx"
	depends on CC3XX_BACKEND
	select CC3XX_MBEDTLS_CHACHA20_C
	help
	  HW accelerated chacha20 support

config CHOICE_OBERON_MBEDTLS_CHACHA20_C
	bool "nrf_oberon"
	depends on OBERON_BACKEND
	select OBERON_MBEDTLS_CHACHA20_C
	help
	  SW implemented chacha20 support

config CHOICE_VANILLA_MBEDTLS_CHACHA20_C
	bool "Original mbed TLS"
	depends on MBEDTLS_VANILLA_BACKEND
	select VANILLA_MBEDTLS_CHACHA20_C
	help
	  SW implemented chacha20 support

endchoice # ChaCha20 backend selection

endif # MBEDTLS_CHACHA20_C

config MBEDTLS_POLY1305_C
	bool
	prompt "POLY1305 module support"
	default y

	select CC3XX_MBEDTLS_POLY1305_C if CC3XX_SINGLE_BACKEND
	select OBERON_MBEDTLS_POLY1305_C if OBERON_SINGLE_BACKEND
	select VANILLA_MBEDTLS_POLY1305_C if MBEDTLS_VANILLA_SINGLE_BACKEND
	help
	  Enable the POLY1305 module.
	  MBEDTLS_POLY1305_C setting in mbed TLS config file.

if MBEDTLS_POLY1305_C

config MBEDTLS_POLY1305_ALT
	bool

	depends on CC3XX_MBEDTLS_POLY1305_C || OBERON_MBEDTLS_POLY1305_C
	default y

config CC3XX_MBEDTLS_POLY1305_C
	bool

config OBERON_MBEDTLS_POLY1305_C
	bool

config VANILLA_MBEDTLS_POLY1305_C
	bool

choice
	bool
	prompt "Backend selection"
	depends on NRF_SECURITY_MULTI_BACKEND
	default CHOICE_CC3XX_MBEDTLS_POLY1305_C

config CHOICE_CC3XX_MBEDTLS_POLY1305_C
	bool "cc3xx"
	depends on CC3XX_BACKEND
	select CC3XX_MBEDTLS_POLY1305_C

config CHOICE_OBERON_MBEDTLS_POLY1305_C
	bool "nrf_oberon"
	depends on OBERON_BACKEND
	select OBERON_MBEDTLS_POLY1305_C

config CHOICE_VANILLA_MBEDTLS_POLY1305_C
	bool "Original mbed TLS"
	depends on MBEDTLS_VANILLA_BACKEND
	select VANILLA_MBEDTLS_POLY1305_C

endchoice # Poly1305 backend selection

endif # MBEDTLS_POLY1305_C

config MBEDTLS_CHACHAPOLY_C
	bool
	prompt "CHACHA-POLY module support"
	depends on (MBEDTLS_CHACHA20_C && MBEDTLS_POLY1305_C)
	default y
	select CC3XX_MBEDTLS_CHACHAPOLY_C if CC3XX_SINGLE_BACKEND
	select VANILLA_MBEDTLS_CHACHAPOLY_C if OBERON_SINGLE_BACKEND
	select VANILLA_MBEDTLS_CHACHAPOLY_C if MBEDTLS_VANILLA_SINGLE_BACKEND
	help
	  Enable the CHACHA-POLY module.
	  MBEDTLS_CHACHAPOLY_C setting in mbed TLS config file.

if MBEDTLS_CHACHAPOLY_C

config MBEDTLS_CHACHAPOLY_ALT
	bool
	depends on CC3XX_MBEDTLS_CHACHAPOLY_C
	default y

config CC3XX_MBEDTLS_CHACHAPOLY_C
	bool

config VANILLA_MBEDTLS_CHACHAPOLY_C
	bool

choice
	bool
	prompt "Backend selection"
	depends on NRF_SECURITY_MULTI_BACKEND
	default CHOICE_CC3XX_MBEDTLS_CHACHAPOLY_C

config CHOICE_CC3XX_MBEDTLS_CHACHAPOLY_C
	bool "cc3xx"
	depends on CC3XX_BACKEND
	select CC3XX_MBEDTLS_CHACHAPOLY_C

config CHOICE_VANILLA_MBEDTLS_CHACHAPOLY_C
	bool "Original mbed TLS"
	depends on OBERON_BACKEND || MBEDTLS_VANILLA_BACKEND
	select VANILLA_MBEDTLS_CHACHAPOLY_C

endchoice # Backend selection

endif # MBEDTLS_CHACHAPOLY_C

endmenu # AEAD  - Authenticated Encryption with Associated Data

#
# DHM gluing is only available for CC3XX_BACKEND + MBEDTLS_VANILLA_BACKEND
# CC3XX will be prioritized if CC3XX_BACKEND + OBERON_BACKEND is selected (not glued)
#
menuconfig MBEDTLS_DHM_C
	bool
	prompt "DHM   - Diffie-Hellman-Merkel"
	default y
	select CC3XX_MBEDTLS_DHM_C if CC3XX_SINGLE_BACKEND
	select VANILLA_MBEDTLS_DHM_C if OBERON_SINGLE_BACKEND
	select VANILLA_MBEDTLS_DHM_C if MBEDTLS_VANILLA_SINGLE_BACKEND
	help
	  Enable the DHM module.
	  MBEDTLS_DHM_C setting in mbed TLS config file.

if MBEDTLS_DHM_C

config MBEDTLS_DHM_ALT
	bool
	depends on CC3XX_MBEDTLS_DHM_C || GLUE_MBEDTLS_DHM_C
	default y

config CC3XX_MBEDTLS_DHM_C
	bool

config VANILLA_MBEDTLS_DHM_C
	bool

if NRF_SECURITY_MULTI_BACKEND

config GLUE_MBEDTLS_DHM_C
	bool
	depends on GLUE_CC3XX_MBEDTLS_DHM_C || GLUE_VANILLA_MBEDTLS_DHM_C
	default y

config GLUE_CC3XX_MBEDTLS_DHM_C
	bool
	depends on CC3XX_MBEDTLS_DHM_C && VANILLA_MBEDTLS_DHM_C
	default y

config GLUE_VANILLA_MBEDTLS_DHM_C
	bool
	depends on CC3XX_MBEDTLS_DHM_C && VANILLA_MBEDTLS_DHM_C
	default y

config CC3XX_MBEDTLS_DHM_C
	bool "cc3xx"
	depends on CC3XX_BACKEND
	default y
	help
	  Enable the DHM module from nrf cc3xx.
	  MBEDTLS_DHM_C setting in mbed TLS config file.

config VANILLA_MBEDTLS_DHM_C
	bool "Original mbed TLS"
	depends on MBEDTLS_VANILLA_BACKEND
	default y if !CC3XX_BACKEND
	help
	  Enable the DHM module from mbed TLS vanilla.
	  MBEDTLS_DHM_C setting in mbed TLS config file.

endif # NRF_SECURITY_MULTI_BACKEND (DHM)

endif # MBEDTLS_DHM_C

menuconfig MBEDTLS_ECP_C
	bool
	prompt "ECC - Eliptic Curve Cryptography"
	default y
	select CC3XX_MBEDTLS_ECP_C if CC3XX_SINGLE_BACKEND
	select OBERON_MBEDTLS_ECP_C if OBERON_SINGLE_BACKEND
	select VANILLA_MBEDTLS_ECP_C if MBEDTLS_VANILLA_SINGLE_BACKEND
	help
	  Enable low level APIs for elliptic curves for
	  additional functionality (besides ECDH and ECDSA)
	  Enabling ECC will provide a sub-menu which allows for fine grained
	  configuration of ECC based features and specific cipher support.
	  Corresponds to MBEDTLS_ECP_C setting in mbed TLS config file.

if MBEDTLS_ECP_C

config MBEDTLS_ECP_ALT
	bool
	depends on CC3XX_MBEDTLS_ECP_C
	default y

config CC3XX_MBEDTLS_ECP_C
	bool

config OBERON_MBEDTLS_ECP_C
	bool

config VANILLA_MBEDTLS_ECP_C
	bool

comment "General ECC Backend Selection"
	depends on NRF_SECURITY_MULTI_BACKEND

choice
	bool
	prompt "Backend selection"
	depends on NRF_SECURITY_MULTI_BACKEND
	default CHOICE_CC3XX_MBEDTLS_ECP_C if CC3XX_BACKEND
	default CHOICE_OBERON_MBEDTLS_ECP_C if OBERON_BACKEND && !CC3XX_BACKEND

config CHOICE_CC3XX_MBEDTLS_ECP_C
	bool "cc3xx"
	depends on CC3XX_BACKEND
	select CC3XX_MBEDTLS_ECP_C

config CHOICE_OBERON_MBEDTLS_ECP_C
	bool "nrf_oberon"
	depends on OBERON_BACKEND
	select OBERON_MBEDTLS_ECP_C

config CHOICE_VANILLA_MBEDTLS_ECP_C
	bool "Original mbed TLS"
	depends on MBEDTLS_VANILLA_BACKEND
	select VANILLA_MBEDTLS_ECP_C

endchoice # "Backend selection"

comment "ECC Feature Selection"

config MBEDTLS_ECDH_C
	bool
	prompt "ECDH  - Elliptic Curve Diffie-Hellman"
	select CC3XX_MBEDTLS_ECDH_C if CC3XX_MBEDTLS_ECP_C
	select OBERON_MBEDTLS_ECDH_C if OBERON_MBEDTLS_ECP_C
	select VANILLA_MBEDTLS_ECDH_C if VANILLA_MBEDTLS_ECP_C
	default y
	help
	  Enable the ECDH module.
	  MBEDTLS_ECDH_C setting in mbed TLS config file.

if MBEDTLS_ECDH_C

config MBEDTLS_ECDH_GEN_PUBLIC_ALT
	bool
	depends on CC3XX_MBEDTLS_ECDH_C || OBERON_MBEDTLS_ECDH_C
	default y

config MBEDTLS_ECDH_COMPUTE_SHARED_ALT
	bool
	depends on CC3XX_MBEDTLS_ECDH_C || OBERON_MBEDTLS_ECDH_C
	default y

config CC3XX_MBEDTLS_ECDH_C
	bool

config OBERON_MBEDTLS_ECDH_C
	bool

config VANILLA_MBEDTLS_ECDH_C
	bool

endif # MBEDTLS_ECDH_C

config MBEDTLS_ECDSA_C
	bool
	prompt "ECDSA - Elliptic Curve Digital Signature Algorithm"
	default y
	select CC3XX_MBEDTLS_ECDSA_C if CC3XX_MBEDTLS_ECP_C
	select OBERON_MBEDTLS_ECDSA_C if OBERON_MBEDTLS_ECP_C
	select VANILLA_MBEDTLS_ECDSA_C if VANILLA_MBEDTLS_ECP_C
	help
	  Enable the ECDSA module.
	  MBEDTLS_ECDSA_C setting in mbed TLS config file.

if MBEDTLS_ECDSA_C

config MBEDTLS_ECDSA_DETERMINISTIC
	bool "Enable deterministic ECDSA (RFC 6979)"
	default y

config MBEDTLS_ECDSA_GENKEY_ALT
	bool
	depends on CC3XX_MBEDTLS_ECDSA_C || OBERON_MBEDTLS_ECDSA_C
	default y

config MBEDTLS_ECDSA_SIGN_ALT
	bool
	depends on CC3XX_MBEDTLS_ECDSA_C || OBERON_MBEDTLS_ECDSA_C
	default y

config MBEDTLS_ECDSA_VERIFY_ALT
	bool
	depends on CC3XX_MBEDTLS_ECDSA_C || OBERON_MBEDTLS_ECDSA_C
	default y

config CC3XX_MBEDTLS_ECDSA_C
	bool

config OBERON_MBEDTLS_ECDSA_C
	bool

config VANILLA_MBEDTLS_ECDSA_C
	bool

endif # MBEDTLS_ECDSA_C

config MBEDTLS_ECJPAKE_C
	bool "ECJPAKE - Elliptic curve J-PAKE"
	select CC3XX_MBEDTLS_ECJPAKE_C if CC3XX_MBEDTLS_ECP_C
	select OBERON_MBEDTLS_ECJPAKE_C if OBERON_MBEDTLS_ECP_C
	select VANILLA_MBEDTLS_ECJPAKE_C if VANILLA_MBEDTLS_ECP_C
	help
	  Enable support for ECJPAKE

if MBEDTLS_ECJPAKE_C

config MBEDTLS_ECJPAKE_ALT
	bool
	depends on OBERON_MBEDTLS_ECJPAKE_C
	default y

config CC3XX_MBEDTLS_ECJPAKE_C
	bool

config OBERON_MBEDTLS_ECJPAKE_C
	bool

config VANILLA_MBEDTLS_ECJPAKE_C
	bool

endif # MBEDTLS_ECJPAKE_C

menu "ECC curves"

config MBEDTLS_ECP_DP_SECP192R1_ENABLED
	bool "Enable NIST curve secp192r1"
	depends on !OBERON_MBEDTLS_ECP_C
	default n
	help
	  MBEDTLS_ECP_DP_SECP192R1_ENABLED setting in mbed TLS config file.

config MBEDTLS_ECP_DP_SECP224R1_ENABLED
	bool "Enable NIST curve secp224r1"
	default n
	help
	  MBEDTLS_ECP_DP_SECP224R1_ENABLED setting in mbed TLS config file.

config MBEDTLS_ECP_DP_SECP256R1_ENABLED
	bool "Enable NIST curve secp256r1"
	default y
	help
	  MBEDTLS_ECP_DP_SECP256R1_ENABLED setting in mbed TLS config file.

config MBEDTLS_ECP_DP_SECP384R1_ENABLED
	bool "Enable NIST curve secp384r1"
	depends on !OBERON_MBEDTLS_ECP_C
	default n
	help
	  MBEDTLS_ECP_DP_SECP384R1_ENABLED setting in mbed TLS config file.

config MBEDTLS_ECP_DP_SECP521R1_ENABLED
	bool "Enable NIST curve secp521r1"
	depends on !OBERON_MBEDTLS_ECP_C
	default n
	help
	  MBEDTLS_ECP_DP_SECP521R1_ENABLED setting in mbed TLS config file.

config MBEDTLS_ECP_DP_SECP192K1_ENABLED
	bool "Enable Koblitz curve secp192k1"
	depends on !OBERON_MBEDTLS_ECP_C
	default n
	help
	  MBEDTLS_ECP_DP_SECP192K1_ENABLED setting in mbed TLS config file.

config MBEDTLS_ECP_DP_SECP224K1_ENABLED
	bool "Enable Koblitz curve secp224k1"
	depends on !OBERON_MBEDTLS_ECP_C
	default n
	help
	  MBEDTLS_ECP_DP_SECP224K1_ENABLED setting in mbed TLS config file.

config MBEDTLS_ECP_DP_SECP256K1_ENABLED
	bool "Enable Koblitz curve secp256k1"
	depends on !OBERON_MBEDTLS_ECP_C
	default n
	help
	  MBEDTLS_ECP_DP_SECP256K1_ENABLED setting in mbed TLS config file.

config MBEDTLS_ECP_DP_BP256R1_ENABLED
	bool "Enable Brainpool curve bp256r1"
	depends on !OBERON_MBEDTLS_ECP_C
	depends on VANILLA_MBEDTLS_ECP_C
	default n
	help
	  MBEDTLS_ECP_DP_BP256R1_ENABLED setting in mbed TLS config file.

config MBEDTLS_ECP_DP_BP384R1_ENABLED
	bool "Enable Brainpool curve bp384r1"
	depends on !OBERON_MBEDTLS_ECP_C
	depends on VANILLA_MBEDTLS_ECP_C
	default n
	help
	  MBEDTLS_ECP_DP_BP384R1_ENABLED setting in mbed TLS config file.

config MBEDTLS_ECP_DP_BP512R1_ENABLED
	bool "Enable Brainpool curve bp512r1"
	depends on !OBERON_MBEDTLS_ECP_C
	depends on VANILLA_MBEDTLS_ECP_C
	default n
	help
	  MBEDTLS_ECP_DP_BP512R1_ENABLED setting in mbed TLS config file.

config MBEDTLS_ECP_DP_CURVE25519_ENABLED
	bool "Enable Curve25519"
	depends on !OBERON_MBEDTLS_ECP_C
	default n
	help
	  MBEDTLS_ECP_DP_CURVE25519_ENABLED setting in mbed TLS config file.

config MBEDTLS_ECP_DP_CURVE448_ENABLED
	bool "Enable Curve448"
	depends on !OBERON_MBEDTLS_ECP_C
	depends on VANILLA_MBEDTLS_ECP_C
	default n
	help
	  MBEDTLS_ECP_DP_CURVE448_ENABLED setting in mbed TLS config file.

endmenu # ECC curves

endif # MBEDTLS_ECP_C

menuconfig MBEDTLS_RSA_C
	bool
	prompt "RSA   - Rivest–Shamir–Adleman cryptosystem"
	default y if !BUILD_WITH_TFM
	select CC3XX_MBEDTLS_RSA_C if CC3XX_SINGLE_BACKEND
	select VANILLA_MBEDTLS_RSA_C if OBERON_SINGLE_BACKEND || MBEDTLS_VANILLA_SINGLE_BACKEND
	help
	  Enable RSA cryptosystem support.
	  MBEDTLS_RSA_C setting in mbed TLS config file.

if MBEDTLS_RSA_C

config MBEDTLS_RSA_ALT
	bool
	depends on CC3XX_MBEDTLS_RSA_C
	default y

config CC3XX_MBEDTLS_RSA_C
	bool

config VANILLA_MBEDTLS_RSA_C
	bool

if NRF_SECURITY_MULTI_BACKEND

comment "RSA Backend Selection"

choice
	bool
	prompt "Backend selection"
	default CHOICE_CC3XX_MBEDTLS_RSA_C

config CHOICE_CC3XX_MBEDTLS_RSA_C
	bool "cc3xx"
	depends on CC3XX_BACKEND
	select CC3XX_MBEDTLS_RSA_C

config CHOICE_VANILLA_MBEDTLS_RSA_C
	bool "Original mbed TLS"
	depends on OBERON_BACKEND || MBEDTLS_VANILLA_BACKEND
	select VANILLA_MBEDTLS_RSA_C

endchoice # RSA Backend Selection

endif # NRF_SECURITY_MULTI_BACKEND

comment "RSA Encoding Selection"

config MBEDTLS_PKCS1_V15
	bool "PKCS1 v1.5 support"
	depends on MBEDTLS_RSA_C

config MBEDTLS_PKCS1_V21
	bool "PKCS1 v2.1 support"
	depends on MBEDTLS_RSA_C
	default y

endif # MBEDTLS_RSA_C

menu "SHA   - Secure Hash Algorithm"

config MBEDTLS_MD5_C
	bool
	default y
	help
	  MD5 hash functionality.
	  MD5 is not recommended for general use as a secure hash algorithm.

config MBEDTLS_SHA1_C
	bool
	prompt "SHA-1 hash functionality"
	select CC3XX_MBEDTLS_SHA1_C if CC3XX_SINGLE_BACKEND
	select OBERON_MBEDTLS_SHA1_C if OBERON_SINGLE_BACKEND
	select VANILLA_MBEDTLS_SHA1_C if MBEDTLS_VANILLA_SINGLE_BACKEND
	default y
	help
	  SHA-1 hash functionality.

if MBEDTLS_SHA1_C

config MBEDTLS_SHA1_ALT
	bool
	depends on CC3XX_MBEDTLS_SHA1_C || OBERON_MBEDTLS_SHA1_C
	default y

config CC3XX_MBEDTLS_SHA1_C
	bool

config OBERON_MBEDTLS_SHA1_C
	bool

config VANILLA_MBEDTLS_SHA1_C
	bool

choice
	bool
	prompt "Backend selection"
	depends on MBEDTLS_SHA1_C && NRF_SECURITY_MULTI_BACKEND
	default CHOICE_CC3XX_MBEDTLS_SHA1_C

config CHOICE_CC3XX_MBEDTLS_SHA1_C
	bool "cc3xx"
	depends on CC3XX_BACKEND
	select CC3XX_MBEDTLS_SHA1_C

config CHOICE_OBERON_MBEDTLS_SHA1_C
	bool "nrf_oberon"
	depends on OBERON_BACKEND
	select OBERON_MBEDTLS_SHA1_C

config CHOICE_VANILLA_MBEDTLS_SHA1_C
	bool "Original mbed TLS"
	depends on MBEDTLS_VANILLA_BACKEND
	select VANILLA_MBEDTLS_SHA1_C

endchoice

endif # MBEDTLS_SHA1_C

config MBEDTLS_SHA256_C
	bool
	prompt "SHA-256 hash functionality"
	select CC3XX_MBEDTLS_SHA256_C if CC3XX_SINGLE_BACKEND
	select OBERON_MBEDTLS_SHA256_C if OBERON_SINGLE_BACKEND
	select VANILLA_MBEDTLS_SHA256_C if MBEDTLS_VANILLA_SINGLE_BACKEND
	default y
	help
	  SHA-256 hash functionality.

if MBEDTLS_SHA256_C

config MBEDTLS_SHA256_ALT
	bool
	depends on CC3XX_MBEDTLS_SHA256_C || OBERON_MBEDTLS_SHA256_C
	default y

config CC3XX_MBEDTLS_SHA256_C
	bool

config OBERON_MBEDTLS_SHA256_C
	bool

config VANILLA_MBEDTLS_SHA256_C
	bool

choice
	bool
	prompt "Backend selection"
	depends on NRF_SECURITY_MULTI_BACKEND
	default CHOICE_CC3XX_MBEDTLS_SHA256_C

config CHOICE_CC3XX_MBEDTLS_SHA256_C
	bool "cc3xx"
	depends on CC3XX_BACKEND
	select CC3XX_MBEDTLS_SHA256_C

config CHOICE_OBERON_MBEDTLS_SHA256_C
	bool "nrf_oberon"
	depends on OBERON_BACKEND
	select OBERON_MBEDTLS_SHA256_C

config CHOICE_VANILLA_MBEDTLS_SHA256_C
	bool "Original mbed TLS"
	depends on MBEDTLS_VANILLA_BACKEND
	select VANILLA_MBEDTLS_SHA256_C

endchoice

endif # MBEDTLS_SHA256_C

config MBEDTLS_SHA512_C
	bool
	prompt "SHA-512 hash functionality"
	default y
	help
	  SW implemented SHA-512 hash support

endmenu # SHA - Secure Hash Algorithm

config APP_LINK_WITH_MBEDTLS_INCLUDES
	bool
	default y
	help
	  Add mbedcrypto header files to the 'app' include path.

comment "Advanced configuration section"

menuconfig NRF_SECURITY_ADVANCED
	bool
	prompt "Advanced mbed TLS Configuration Settings"
	help
	  This setting will enable the advanced configuration menu.
	  The advanced configuration allows for further fine tuning of the mbed TLS configuration
	  by adjusting , as example: SSL maximum content sizes, disabling of specific cipher suites,
	  ECP bit sizes, Bignum options.

if NRF_SECURITY_ADVANCED

comment "Advanced mbed TLS settings"

config MBEDTLS_AES_ROM_TABLES
	bool "Use AES ROM tables"
	depends on VANILLA_MBEDTLS_AES_C
	help
	  AES lookup tables will be placed in ROM instead of RAM
	  Placing the AES lookup tables in ROM will perform slower but will reduce RAM usage.
	  Using precompiled ROM tables reduces RAM size by ~8kB with an additional
	  cost of ~8kB of ROM size.
	  If MBEDTLS_AES_FEWER_TABLES is used the RAM reduction is ~2kB with an
	  additional cost of ~2kB of ROM size.
	  MBEDTLS_AES_ROM_TABLES setting in mbed TLS config file.

config MBEDTLS_AES_FEWER_TABLES
	bool "Use fewer AES tables"
	depends on VANILLA_MBEDTLS_AES_C
	help
	  Enabling this configuration omits 75% of the AES tables in ROM or RAM.
	  There is a tradeoff between lookup size and doing more arithmetic
	  operations on the fly, which impacts the performance of the AES operations.
	  MBEDTLS_AES_FEWER_TABLES setting in mbed TLS config file.

config MBEDTLS_MPI_WINDOW_SIZE
	int "MPI - Multiple Precision Integers window size"
	depends on CC3XX_BACKEND || VANILLA_MBEDTLS_AES_C
	range 1 6
	default 6
	help
	  Window size used for Multiple Precision Integers (MPI) / Bignum calculation.
	  Note that reducing this value might have an impact on the performance.
	  MBEDTLS_MPI_WINDOW_SIZE setting in mbed TLS config file.

config MBEDTLS_MPI_MAX_SIZE
	int "MPI - Multiple Precision Integers maximum size"
	depends on CC3XX_BACKEND || VANILLA_MBEDTLS_AES_C
	range 0 1024
	default 1024
	help
	  Maximum number of bytes for usable Multiple Precision Integers (MPI) / Bignum.
	  This will reduce the size of MPIs that can be used for calculation.
	  Only reduce this value if it is ensured that the system won't need larger numbers.
	  MBEDTLS_MPI_MAX_SIZE setting in mbed TLS config file.

config MBEDTLS_ECP_MAX_BITS
	int "ECP - Max bit size of Elliptic Curves"
	depends on CC3XX_BACKEND || VANILLA_MBEDTLS_AES_C
	range 0 521
	default 521
	help
	  This setting controls the largest elliptic curve supported in the library.
	  If only smaller curves are used, then this value can be reduced in order to save memory.
	  MBEDTLS_ECP_MAX_BITS setting in mbed TLS config file.

config MBEDTLS_ECP_WINDOW_SIZE
	int "ECP - Elliptic Curve multiplication window size"
	depends on CC3XX_BACKEND || VANILLA_MBEDTLS_AES_C
	range 2 6
	default 6
	help
	  Window sized used for elliptic curve multiplication. This value can be reduce down to 2.
	  Reducing the value will impact the performance of the system.
	  MBEDTLS_ECP_WINDOW_SIZE setting in mbed TLS config file.

config MBEDTLS_ECP_FIXED_POINT_OPTIM
	bool "ECP - Elliptic Curve fixed point optimization"
	depends on CC3XX_BACKEND || VANILLA_MBEDTLS_AES_C
	default y
	help
	  This setting control ECP fixed point optimizations.
	  If disabled, the system will use less memory, but it will also reduce the performance of
	  the system.
	  MBEDTLS_ECP_FIXED_POINT_OPTIM setting in mbed TLS config file.

config MBEDTLS_SHA256_SMALLER
	bool "Use SHA256 small footprint implementation"
	depends on VANILLA_MBEDTLS_SHA256_C
	help
	  Use a SHA-256 implementation with smaller footprint.
	  Note, that this implementation will also have a lower performance.
	  On a Cortex-M4 the size of mbedtls_sha256_process() will be reduced from ~2KB to ~0.5KB,
	  however it will also perform around 30% slower.
	  MBEDTLS_SHA256_SMALLER setting in mbed TLS config file.

config MBEDTLS_SSL_MAX_CONTENT_LEN
	int "SSL - Maximum buffer size"
	range 0 16384
	default 900 if OPENTHREAD_NRF_SECURITY
	default 16384
	depends on MBEDTLS_TLS_LIBRARY
	help
	  Maximum buffer size for incoming and outgoing mbed TLS I/O buffers.
	  MBEDTLS_SSL_MAX_CONTENT_LEN setting in mbed TLS config file.

config MBEDTLS_SSL_CIPHERSUITES
	string "SSL - Cipher suites tuning"
	depends on MBEDTLS_TLS_LIBRARY
	help
	  List of cipher suites to support in SSL/TLS.
	  The cipher suites are given as a comma separated string, and in order of preference.
	  This list can only be used for restricting cipher suites available in the system.
	  Warning: This field has offers no validation checks.
	  MBEDTLS_SSL_CIPHERSUITES setting in mbed TLS config file.

config MBEDTLS_PK_C
	bool "PK - Enable the generic public (asymetric) key layer"
	depends on MBEDTLS_TLS_LIBRARY
	help
	  Enable generic public key wrappers.

config MBEDTLS_PK_WRITE_C
	bool "Enable the generic public (asymetric) key writer"
	depends on MBEDTLS_PK_C
	default y if MBEDTLS_USE_PSA_CRYPTO
	help
	  Enable generic public key write functions.

config MBEDTLS_SSL_RENEGOTIATION
	bool "SSL - Renegotiation"
	depends on MBEDTLS_TLS_LIBRARY
	help
	  Enable support for TLS renegotiation.

config MBEDTLS_SSL_ALPN
	bool "SSL - RFC 7301 ALP Negotiation"
	depends on MBEDTLS_TLS_LIBRARY
	help
	  Enable support for RFC 7301 Application Layer Protocol Negotiation.

config MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE
	bool "SSL - DTLS client port reuse"
	depends on MBEDTLS_TLS_LIBRARY
	help
	  Enable server-side support for clients that reconnect from the same port.

config MBEDTLS_SSL_DTLS_BADMAC_LIMIT
	bool "SSL - DTLS bad MAC limit"
	depends on MBEDTLS_TLS_LIBRARY
	help
	  Enable support for a limit of records with bad MAC.

config MBEDTLS_SSL_SESSION_TICKETS
	bool "SSL - RFC 5077 session tickets support"
	depends on MBEDTLS_TLS_LIBRARY
	help
	  Enable support for RFC 5077 session tickets in SSL.

config MBEDTLS_SSL_SERVER_NAME_INDICATION
	bool "SSL - RFC 6066 SNI"
	depends on MBEDTLS_TLS_LIBRARY
	help
	  Enable support for RFC 6066 server name indication (SNI) in SSL.

config MBEDTLS_SSL_CACHE_C
	bool "SSL - cache"
	depends on MBEDTLS_TLS_LIBRARY
	help
	  Enable simple SSL cache implementation.

config MBEDTLS_SSL_TICKET_C
	bool "SSL - tickets"
	depends on MBEDTLS_TLS_LIBRARY
	help
	  Enable an implementation of TLS server-side callbacks for session tickets.

config MBEDTLS_SSL_CONTEXT_SERIALIZATION
	bool "SSL - context serialization"
	depends on MBEDTLS_TLS_LIBRARY
	help
	  Enable serialization of the TLS context structures.
	  Enabling this allows faster resume but also makes some SSL structures larger

config MBEDTLS_SSL_DTLS_CONNECTION_ID
	bool "SSL - DTLS connection ID"
	depends on MBEDTLS_TLS_LIBRARY
	help
	  Enable support for the DTLS Connection ID extension which allows to
	  identify DTLS connections across changes in the underlying transport.
	  The Connection ID extension is still in draft state.

config MBEDTLS_X509_CHECK_KEY_USAGE
	bool "X.509 - check key usage"
	depends on MBEDTLS_X509_LIBRARY
	help
	  Enable verification of the keyUsage extension (CA and leaf certificates).

config MBEDTLS_X509_CHECK_EXTENDED_KEY_USAGE
	bool "X.509 - check extended key usage"
	depends on MBEDTLS_X509_LIBRARY
	help
	  Enable verification of the extendedKeyUsage extension (leaf certificates).

config MBEDTLS_X509_CRL_PARSE_C
	bool "X.509 - CRL parsing"
	depends on MBEDTLS_X509_LIBRARY
	help
	  Enable X.509 CRL parsing.

config MBEDTLS_X509_CSR_PARSE_C
	bool "X.509 - CSR parsing"
	depends on MBEDTLS_X509_LIBRARY
	help
	  Enable X.509 Certificate Signing Requests (CSR) parsing.

config MBEDTLS_X509_CREATE_C
	bool "X.509 - creating certificates core"
	depends on MBEDTLS_X509_LIBRARY
	help
	  Enable X.509 core for creating certificates.

config MBEDTLS_X509_CSR_WRITE_C
	bool "X.509 - CSR writing"
	depends on MBEDTLS_X509_LIBRARY
	help
	  Enable creating X.509 Certificate Signing Requests (CSR).

config MBEDTLS_ENTROPY_MAX_SOURCES
	int "Maximum number of entropy sources"
	default 1
	help
	  Maximum number of entropy sources supported.

endif # NRF_SECURITY_ADVANCED

config MBEDTLS_PSA_CRYPTO_C
	bool "Enable PSA API support"
	default y if BUILD_WITH_TFM
	help
	  Enables the usage of the PSA APIs in mbed TLS.
	  Corresponds to MBEDTLS_PSA_CRYPTO_C setting in mbed TLS config file.

if MBEDTLS_PSA_CRYPTO_C

rsource "Kconfig.psa"

endif # PSA_API_SUPPORT

endif # NRF_SECURITY_ANY_BACKEND

endif # NORDIC_SECURITY_BACKEND

endmenu # Nordic Security
