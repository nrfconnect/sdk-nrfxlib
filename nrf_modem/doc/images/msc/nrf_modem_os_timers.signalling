title: Timers;
msc=round_green;
hscale=3;

app,nrf_modem,nrf_modem_os.c;

...;
app->nrf_modem: setsockopt(..., NRF_SO_RCVTIMEO, 30 seconds);
app->nrf_modem: recv(buffer);
activate app;
nrf_modem->nrf_modem_os.c: nrf_modem_os_timedwait(context, *remaining_timeout_in_out);
nrf_modem_os.c->nrf_modem_os.c: Start timer/thread;
nrf_modem_os.c->nrf_modem_os.c: Sleep;
---: Waiting for EGU1 to hit ...;
nrf_modem_os.c<-: EGU1_IRQHandler (Priority 6);
nrf_modem<-nrf_modem_os.c: nrf_modem_application_irq_handler();
activate nrf_modem;
nrf_modem->nrf_modem_os.c: nrf_modem_os_application_irq_clear();
activate nrf_modem_os.c;
nrf_modem_os.c->nrf_modem_os.c: NVIC_ClearPendingIRQ(EGU2);
nrf_modem<<nrf_modem_os.c;
deactivate nrf_modem_os.c;
nrf_modem_os.c--nrf_modem_os.c: Wake up timers/threads;
nrf_modem>>nrf_modem_os.c;
deactivate nrf_modem;
nrf_modem_os.c->nrf_modem_os.c: return NRF_ETIMEDOUT/remaining;
nrf_modem<-nrf_modem_os.c;
nrf_modem..nrf_modem: If no timeout, data is\nready for consumption\nby the application;
app<-nrf_modem: bytes received or -1,\nerrno NRF_ETIMEDOUT;
deactivate app;
...;
